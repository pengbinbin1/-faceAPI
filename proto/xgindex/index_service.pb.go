// Code generated by protoc-gen-go. DO NOT EDIT.
// source: index_service.proto

package xgindex

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Error_ErrorCode int32

const (
	Error_XG_SUCCESS          Error_ErrorCode = 0
	Error_XG_FAILED           Error_ErrorCode = -1
	Error_XG_OVERLIMMITED     Error_ErrorCode = -2
	Error_XG_INVALID_PARA     Error_ErrorCode = -3
	Error_XG_KD_FAILED        Error_ErrorCode = -4
	Error_XG_KD_INSERT_FAILED Error_ErrorCode = -7
	Error_XG_NOT_FOUND        Error_ErrorCode = -6
)

var Error_ErrorCode_name = map[int32]string{
	0:  "XG_SUCCESS",
	-1: "XG_FAILED",
	-2: "XG_OVERLIMMITED",
	-3: "XG_INVALID_PARA",
	-4: "XG_KD_FAILED",
	-7: "XG_KD_INSERT_FAILED",
	-6: "XG_NOT_FOUND",
}
var Error_ErrorCode_value = map[string]int32{
	"XG_SUCCESS":          0,
	"XG_FAILED":           -1,
	"XG_OVERLIMMITED":     -2,
	"XG_INVALID_PARA":     -3,
	"XG_KD_FAILED":        -4,
	"XG_KD_INSERT_FAILED": -7,
	"XG_NOT_FOUND":        -6,
}

func (x Error_ErrorCode) String() string {
	return proto.EnumName(Error_ErrorCode_name, int32(x))
}
func (Error_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_index_service_4001611abf2137c1, []int{10, 0}
}

type Request struct {
	Threshhold           float32  `protobuf:"fixed32,1,opt,name=threshhold,proto3" json:"threshhold,omitempty"`
	Feature              *Feature `protobuf:"bytes,2,opt,name=feature,proto3" json:"feature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_service_4001611abf2137c1, []int{0}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (dst *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(dst, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetThreshhold() float32 {
	if m != nil {
		return m.Threshhold
	}
	return 0
}

func (m *Request) GetFeature() *Feature {
	if m != nil {
		return m.Feature
	}
	return nil
}

type KnnRequest struct {
	Knn                  int32    `protobuf:"varint,1,opt,name=knn,proto3" json:"knn,omitempty"`
	Feature              *Feature `protobuf:"bytes,2,opt,name=feature,proto3" json:"feature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KnnRequest) Reset()         { *m = KnnRequest{} }
func (m *KnnRequest) String() string { return proto.CompactTextString(m) }
func (*KnnRequest) ProtoMessage()    {}
func (*KnnRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_service_4001611abf2137c1, []int{1}
}
func (m *KnnRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KnnRequest.Unmarshal(m, b)
}
func (m *KnnRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KnnRequest.Marshal(b, m, deterministic)
}
func (dst *KnnRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KnnRequest.Merge(dst, src)
}
func (m *KnnRequest) XXX_Size() int {
	return xxx_messageInfo_KnnRequest.Size(m)
}
func (m *KnnRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_KnnRequest.DiscardUnknown(m)
}

var xxx_messageInfo_KnnRequest proto.InternalMessageInfo

func (m *KnnRequest) GetKnn() int32 {
	if m != nil {
		return m.Knn
	}
	return 0
}

func (m *KnnRequest) GetFeature() *Feature {
	if m != nil {
		return m.Feature
	}
	return nil
}

type Response struct {
	Cids                 []int32   `protobuf:"varint,1,rep,packed,name=cids,proto3" json:"cids,omitempty"`
	Similarity           []float32 `protobuf:"fixed32,2,rep,packed,name=similarity,proto3" json:"similarity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_service_4001611abf2137c1, []int{2}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (dst *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(dst, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetCids() []int32 {
	if m != nil {
		return m.Cids
	}
	return nil
}

func (m *Response) GetSimilarity() []float32 {
	if m != nil {
		return m.Similarity
	}
	return nil
}

type KDClusterCount struct {
	KdCount              int32    `protobuf:"varint,1,opt,name=kd_count,json=kdCount,proto3" json:"kd_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KDClusterCount) Reset()         { *m = KDClusterCount{} }
func (m *KDClusterCount) String() string { return proto.CompactTextString(m) }
func (*KDClusterCount) ProtoMessage()    {}
func (*KDClusterCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_service_4001611abf2137c1, []int{3}
}
func (m *KDClusterCount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KDClusterCount.Unmarshal(m, b)
}
func (m *KDClusterCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KDClusterCount.Marshal(b, m, deterministic)
}
func (dst *KDClusterCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KDClusterCount.Merge(dst, src)
}
func (m *KDClusterCount) XXX_Size() int {
	return xxx_messageInfo_KDClusterCount.Size(m)
}
func (m *KDClusterCount) XXX_DiscardUnknown() {
	xxx_messageInfo_KDClusterCount.DiscardUnknown(m)
}

var xxx_messageInfo_KDClusterCount proto.InternalMessageInfo

func (m *KDClusterCount) GetKdCount() int32 {
	if m != nil {
		return m.KdCount
	}
	return 0
}

type BuildRequest struct {
	Feature              []*Feature `protobuf:"bytes,1,rep,name=feature,proto3" json:"feature,omitempty"`
	Threshold            float32    `protobuf:"fixed32,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *BuildRequest) Reset()         { *m = BuildRequest{} }
func (m *BuildRequest) String() string { return proto.CompactTextString(m) }
func (*BuildRequest) ProtoMessage()    {}
func (*BuildRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_service_4001611abf2137c1, []int{4}
}
func (m *BuildRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildRequest.Unmarshal(m, b)
}
func (m *BuildRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildRequest.Marshal(b, m, deterministic)
}
func (dst *BuildRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildRequest.Merge(dst, src)
}
func (m *BuildRequest) XXX_Size() int {
	return xxx_messageInfo_BuildRequest.Size(m)
}
func (m *BuildRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BuildRequest proto.InternalMessageInfo

func (m *BuildRequest) GetFeature() []*Feature {
	if m != nil {
		return m.Feature
	}
	return nil
}

func (m *BuildRequest) GetThreshold() float32 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

type BuildResponse struct {
	Err                  *Error     `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	IndexMap             *IndexMap  `protobuf:"bytes,2,opt,name=index_map,json=indexMap,proto3" json:"index_map,omitempty"`
	Cluster              []*Cluster `protobuf:"bytes,3,rep,name=cluster,proto3" json:"cluster,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *BuildResponse) Reset()         { *m = BuildResponse{} }
func (m *BuildResponse) String() string { return proto.CompactTextString(m) }
func (*BuildResponse) ProtoMessage()    {}
func (*BuildResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_service_4001611abf2137c1, []int{5}
}
func (m *BuildResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildResponse.Unmarshal(m, b)
}
func (m *BuildResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildResponse.Marshal(b, m, deterministic)
}
func (dst *BuildResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildResponse.Merge(dst, src)
}
func (m *BuildResponse) XXX_Size() int {
	return xxx_messageInfo_BuildResponse.Size(m)
}
func (m *BuildResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BuildResponse proto.InternalMessageInfo

func (m *BuildResponse) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *BuildResponse) GetIndexMap() *IndexMap {
	if m != nil {
		return m.IndexMap
	}
	return nil
}

func (m *BuildResponse) GetCluster() []*Cluster {
	if m != nil {
		return m.Cluster
	}
	return nil
}

type Cluster struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Feature              *Feature `protobuf:"bytes,2,opt,name=feature,proto3" json:"feature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Cluster) Reset()         { *m = Cluster{} }
func (m *Cluster) String() string { return proto.CompactTextString(m) }
func (*Cluster) ProtoMessage()    {}
func (*Cluster) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_service_4001611abf2137c1, []int{6}
}
func (m *Cluster) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Cluster.Unmarshal(m, b)
}
func (m *Cluster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Cluster.Marshal(b, m, deterministic)
}
func (dst *Cluster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cluster.Merge(dst, src)
}
func (m *Cluster) XXX_Size() int {
	return xxx_messageInfo_Cluster.Size(m)
}
func (m *Cluster) XXX_DiscardUnknown() {
	xxx_messageInfo_Cluster.DiscardUnknown(m)
}

var xxx_messageInfo_Cluster proto.InternalMessageInfo

func (m *Cluster) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Cluster) GetFeature() *Feature {
	if m != nil {
		return m.Feature
	}
	return nil
}

type IndexMap struct {
	Index                map[int32]*Feature `protobuf:"bytes,1,rep,name=index,proto3" json:"index,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *IndexMap) Reset()         { *m = IndexMap{} }
func (m *IndexMap) String() string { return proto.CompactTextString(m) }
func (*IndexMap) ProtoMessage()    {}
func (*IndexMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_service_4001611abf2137c1, []int{7}
}
func (m *IndexMap) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IndexMap.Unmarshal(m, b)
}
func (m *IndexMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IndexMap.Marshal(b, m, deterministic)
}
func (dst *IndexMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexMap.Merge(dst, src)
}
func (m *IndexMap) XXX_Size() int {
	return xxx_messageInfo_IndexMap.Size(m)
}
func (m *IndexMap) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexMap.DiscardUnknown(m)
}

var xxx_messageInfo_IndexMap proto.InternalMessageInfo

func (m *IndexMap) GetIndex() map[int32]*Feature {
	if m != nil {
		return m.Index
	}
	return nil
}

type Feature struct {
	Value                []float32 `protobuf:"fixed32,1,rep,packed,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Feature) Reset()         { *m = Feature{} }
func (m *Feature) String() string { return proto.CompactTextString(m) }
func (*Feature) ProtoMessage()    {}
func (*Feature) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_service_4001611abf2137c1, []int{8}
}
func (m *Feature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Feature.Unmarshal(m, b)
}
func (m *Feature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Feature.Marshal(b, m, deterministic)
}
func (dst *Feature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Feature.Merge(dst, src)
}
func (m *Feature) XXX_Size() int {
	return xxx_messageInfo_Feature.Size(m)
}
func (m *Feature) XXX_DiscardUnknown() {
	xxx_messageInfo_Feature.DiscardUnknown(m)
}

var xxx_messageInfo_Feature proto.InternalMessageInfo

func (m *Feature) GetValue() []float32 {
	if m != nil {
		return m.Value
	}
	return nil
}

type Features struct {
	Feature              []*Feature `protobuf:"bytes,1,rep,name=feature,proto3" json:"feature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Features) Reset()         { *m = Features{} }
func (m *Features) String() string { return proto.CompactTextString(m) }
func (*Features) ProtoMessage()    {}
func (*Features) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_service_4001611abf2137c1, []int{9}
}
func (m *Features) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Features.Unmarshal(m, b)
}
func (m *Features) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Features.Marshal(b, m, deterministic)
}
func (dst *Features) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Features.Merge(dst, src)
}
func (m *Features) XXX_Size() int {
	return xxx_messageInfo_Features.Size(m)
}
func (m *Features) XXX_DiscardUnknown() {
	xxx_messageInfo_Features.DiscardUnknown(m)
}

var xxx_messageInfo_Features proto.InternalMessageInfo

func (m *Features) GetFeature() []*Feature {
	if m != nil {
		return m.Feature
	}
	return nil
}

type Error struct {
	ErrCode              Error_ErrorCode `protobuf:"varint,1,opt,name=err_code,json=errCode,proto3,enum=xgindex.Error_ErrorCode" json:"err_code,omitempty"`
	ErrInfo              string          `protobuf:"bytes,2,opt,name=err_info,json=errInfo,proto3" json:"err_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_service_4001611abf2137c1, []int{10}
}
func (m *Error) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Error.Unmarshal(m, b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Error.Marshal(b, m, deterministic)
}
func (dst *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(dst, src)
}
func (m *Error) XXX_Size() int {
	return xxx_messageInfo_Error.Size(m)
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetErrCode() Error_ErrorCode {
	if m != nil {
		return m.ErrCode
	}
	return Error_XG_SUCCESS
}

func (m *Error) GetErrInfo() string {
	if m != nil {
		return m.ErrInfo
	}
	return ""
}

func init() {
	proto.RegisterType((*Request)(nil), "xgindex.Request")
	proto.RegisterType((*KnnRequest)(nil), "xgindex.KnnRequest")
	proto.RegisterType((*Response)(nil), "xgindex.Response")
	proto.RegisterType((*KDClusterCount)(nil), "xgindex.KDClusterCount")
	proto.RegisterType((*BuildRequest)(nil), "xgindex.BuildRequest")
	proto.RegisterType((*BuildResponse)(nil), "xgindex.BuildResponse")
	proto.RegisterType((*Cluster)(nil), "xgindex.Cluster")
	proto.RegisterType((*IndexMap)(nil), "xgindex.IndexMap")
	proto.RegisterMapType((map[int32]*Feature)(nil), "xgindex.IndexMap.IndexEntry")
	proto.RegisterType((*Feature)(nil), "xgindex.Feature")
	proto.RegisterType((*Features)(nil), "xgindex.Features")
	proto.RegisterType((*Error)(nil), "xgindex.Error")
	proto.RegisterEnum("xgindex.Error_ErrorCode", Error_ErrorCode_name, Error_ErrorCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IndexServiceClient is the client API for IndexService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IndexServiceClient interface {
	// index RPC service
	//
	BuildbyPoints(ctx context.Context, in *BuildRequest, opts ...grpc.CallOption) (*BuildResponse, error)
	BuildbyClusters(ctx context.Context, in *IndexMap, opts ...grpc.CallOption) (*Error, error)
	Find(ctx context.Context, in *Feature, opts ...grpc.CallOption) (*Cluster, error)
	InsertPoint(ctx context.Context, in *Feature, opts ...grpc.CallOption) (*Cluster, error)
	InsertCluster(ctx context.Context, in *Feature, opts ...grpc.CallOption) (*Cluster, error)
	UpdateCluster(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*Error, error)
	DeletebyCId(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*Error, error)
	GetKdClusterCount(ctx context.Context, in *Request, opts ...grpc.CallOption) (*KDClusterCount, error)
	FindWithThreshhold(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	FindKnn(ctx context.Context, in *KnnRequest, opts ...grpc.CallOption) (*Response, error)
	InsertIndexPoint(ctx context.Context, in *Feature, opts ...grpc.CallOption) (*Error, error)
}

type indexServiceClient struct {
	cc *grpc.ClientConn
}

func NewIndexServiceClient(cc *grpc.ClientConn) IndexServiceClient {
	return &indexServiceClient{cc}
}

func (c *indexServiceClient) BuildbyPoints(ctx context.Context, in *BuildRequest, opts ...grpc.CallOption) (*BuildResponse, error) {
	out := new(BuildResponse)
	err := c.cc.Invoke(ctx, "/xgindex.IndexService/BuildbyPoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServiceClient) BuildbyClusters(ctx context.Context, in *IndexMap, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/xgindex.IndexService/BuildbyClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServiceClient) Find(ctx context.Context, in *Feature, opts ...grpc.CallOption) (*Cluster, error) {
	out := new(Cluster)
	err := c.cc.Invoke(ctx, "/xgindex.IndexService/Find", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServiceClient) InsertPoint(ctx context.Context, in *Feature, opts ...grpc.CallOption) (*Cluster, error) {
	out := new(Cluster)
	err := c.cc.Invoke(ctx, "/xgindex.IndexService/InsertPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServiceClient) InsertCluster(ctx context.Context, in *Feature, opts ...grpc.CallOption) (*Cluster, error) {
	out := new(Cluster)
	err := c.cc.Invoke(ctx, "/xgindex.IndexService/InsertCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServiceClient) UpdateCluster(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/xgindex.IndexService/UpdateCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServiceClient) DeletebyCId(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/xgindex.IndexService/DeletebyCId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServiceClient) GetKdClusterCount(ctx context.Context, in *Request, opts ...grpc.CallOption) (*KDClusterCount, error) {
	out := new(KDClusterCount)
	err := c.cc.Invoke(ctx, "/xgindex.IndexService/GetKdClusterCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServiceClient) FindWithThreshhold(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/xgindex.IndexService/FindWithThreshhold", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServiceClient) FindKnn(ctx context.Context, in *KnnRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/xgindex.IndexService/FindKnn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServiceClient) InsertIndexPoint(ctx context.Context, in *Feature, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/xgindex.IndexService/InsertIndexPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IndexServiceServer is the server API for IndexService service.
type IndexServiceServer interface {
	// index RPC service
	//
	BuildbyPoints(context.Context, *BuildRequest) (*BuildResponse, error)
	BuildbyClusters(context.Context, *IndexMap) (*Error, error)
	Find(context.Context, *Feature) (*Cluster, error)
	InsertPoint(context.Context, *Feature) (*Cluster, error)
	InsertCluster(context.Context, *Feature) (*Cluster, error)
	UpdateCluster(context.Context, *Cluster) (*Error, error)
	DeletebyCId(context.Context, *Cluster) (*Error, error)
	GetKdClusterCount(context.Context, *Request) (*KDClusterCount, error)
	FindWithThreshhold(context.Context, *Request) (*Response, error)
	FindKnn(context.Context, *KnnRequest) (*Response, error)
	InsertIndexPoint(context.Context, *Feature) (*Error, error)
}

func RegisterIndexServiceServer(s *grpc.Server, srv IndexServiceServer) {
	s.RegisterService(&_IndexService_serviceDesc, srv)
}

func _IndexService_BuildbyPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).BuildbyPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xgindex.IndexService/BuildbyPoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).BuildbyPoints(ctx, req.(*BuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexService_BuildbyClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexMap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).BuildbyClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xgindex.IndexService/BuildbyClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).BuildbyClusters(ctx, req.(*IndexMap))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexService_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Feature)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xgindex.IndexService/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).Find(ctx, req.(*Feature))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexService_InsertPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Feature)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).InsertPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xgindex.IndexService/InsertPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).InsertPoint(ctx, req.(*Feature))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexService_InsertCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Feature)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).InsertCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xgindex.IndexService/InsertCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).InsertCluster(ctx, req.(*Feature))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexService_UpdateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).UpdateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xgindex.IndexService/UpdateCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).UpdateCluster(ctx, req.(*Cluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexService_DeletebyCId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).DeletebyCId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xgindex.IndexService/DeletebyCId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).DeletebyCId(ctx, req.(*Cluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexService_GetKdClusterCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).GetKdClusterCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xgindex.IndexService/GetKdClusterCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).GetKdClusterCount(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexService_FindWithThreshhold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).FindWithThreshhold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xgindex.IndexService/FindWithThreshhold",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).FindWithThreshhold(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexService_FindKnn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KnnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).FindKnn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xgindex.IndexService/FindKnn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).FindKnn(ctx, req.(*KnnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexService_InsertIndexPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Feature)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).InsertIndexPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xgindex.IndexService/InsertIndexPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).InsertIndexPoint(ctx, req.(*Feature))
	}
	return interceptor(ctx, in, info, handler)
}

var _IndexService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "xgindex.IndexService",
	HandlerType: (*IndexServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BuildbyPoints",
			Handler:    _IndexService_BuildbyPoints_Handler,
		},
		{
			MethodName: "BuildbyClusters",
			Handler:    _IndexService_BuildbyClusters_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _IndexService_Find_Handler,
		},
		{
			MethodName: "InsertPoint",
			Handler:    _IndexService_InsertPoint_Handler,
		},
		{
			MethodName: "InsertCluster",
			Handler:    _IndexService_InsertCluster_Handler,
		},
		{
			MethodName: "UpdateCluster",
			Handler:    _IndexService_UpdateCluster_Handler,
		},
		{
			MethodName: "DeletebyCId",
			Handler:    _IndexService_DeletebyCId_Handler,
		},
		{
			MethodName: "GetKdClusterCount",
			Handler:    _IndexService_GetKdClusterCount_Handler,
		},
		{
			MethodName: "FindWithThreshhold",
			Handler:    _IndexService_FindWithThreshhold_Handler,
		},
		{
			MethodName: "FindKnn",
			Handler:    _IndexService_FindKnn_Handler,
		},
		{
			MethodName: "InsertIndexPoint",
			Handler:    _IndexService_InsertIndexPoint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "index_service.proto",
}

func init() { proto.RegisterFile("index_service.proto", fileDescriptor_index_service_4001611abf2137c1) }

var fileDescriptor_index_service_4001611abf2137c1 = []byte{
	// 755 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xdd, 0x6e, 0xda, 0x48,
	0x14, 0xc6, 0x26, 0xac, 0xe1, 0x90, 0x10, 0x67, 0xb2, 0x9b, 0x25, 0x28, 0xda, 0x45, 0xbe, 0xa8,
	0xa2, 0xb6, 0x42, 0x2a, 0xa8, 0x51, 0xd5, 0x4a, 0x55, 0x28, 0x18, 0xe4, 0x90, 0x90, 0xc8, 0x40,
	0xca, 0x9d, 0x45, 0xf0, 0xa4, 0x58, 0x21, 0x63, 0x3a, 0x36, 0x51, 0x78, 0x85, 0x4a, 0x7d, 0x88,
	0x3e, 0x4d, 0xdf, 0xa8, 0x52, 0xab, 0xfe, 0xc9, 0x33, 0x63, 0x9b, 0x40, 0x52, 0x25, 0x5c, 0x58,
	0x87, 0xef, 0xfc, 0xcc, 0x37, 0xdf, 0x39, 0x33, 0x03, 0x9b, 0x0e, 0xb1, 0xf1, 0xb5, 0xe5, 0x61,
	0x7a, 0xe5, 0x0c, 0x71, 0x69, 0x42, 0x5d, 0xdf, 0x45, 0xca, 0xf5, 0x3b, 0x06, 0x6b, 0x3d, 0x50,
	0x4c, 0xfc, 0x7e, 0x8a, 0x3d, 0x1f, 0xfd, 0x07, 0xe0, 0x8f, 0x28, 0xf6, 0x46, 0x23, 0x77, 0x6c,
	0xe7, 0xa5, 0xa2, 0xb4, 0x2b, 0x9b, 0x73, 0x08, 0x7a, 0x0c, 0xca, 0x39, 0x1e, 0xf8, 0x53, 0x8a,
	0xf3, 0x72, 0x51, 0xda, 0xcd, 0x96, 0xd5, 0x92, 0xa8, 0x52, 0x6a, 0x70, 0xdc, 0x0c, 0x03, 0xb4,
	0x03, 0x80, 0x16, 0x21, 0x61, 0x65, 0x15, 0x92, 0x17, 0x84, 0xb0, 0x92, 0x29, 0x33, 0x30, 0x1f,
	0x54, 0xeb, 0x35, 0xa4, 0x4d, 0xec, 0x4d, 0x5c, 0xe2, 0x61, 0x84, 0x60, 0x65, 0xe8, 0xd8, 0x5e,
	0x5e, 0x2a, 0x26, 0x77, 0x53, 0x26, 0xb3, 0x03, 0xde, 0x9e, 0x73, 0xe9, 0x8c, 0x07, 0xd4, 0xf1,
	0x67, 0x79, 0xb9, 0x98, 0x0c, 0x78, 0xc7, 0x88, 0xf6, 0x04, 0x72, 0xad, 0x7a, 0x6d, 0x3c, 0xf5,
	0x7c, 0x4c, 0x6b, 0xee, 0x94, 0xf8, 0x68, 0x1b, 0xd2, 0x17, 0xb6, 0x35, 0x0c, 0x6c, 0x41, 0x4a,
	0xb9, 0xb0, 0x99, 0x4b, 0xeb, 0xc3, 0xea, 0x9b, 0xa9, 0x33, 0xb6, 0x43, 0xea, 0x73, 0x44, 0x83,
	0x35, 0xff, 0x44, 0x14, 0xed, 0x40, 0x86, 0xcb, 0x15, 0xe8, 0x27, 0x33, 0xfd, 0x62, 0x40, 0xfb,
	0x28, 0xc1, 0x9a, 0x28, 0x2d, 0x36, 0x53, 0x84, 0x24, 0xa6, 0x94, 0x31, 0xc8, 0x96, 0x73, 0x51,
	0x5d, 0x9d, 0x52, 0x97, 0x9a, 0x81, 0x0b, 0x95, 0x20, 0xc3, 0xbb, 0x77, 0x39, 0x98, 0x08, 0xa1,
	0x36, 0xa2, 0x38, 0x23, 0xf8, 0x1e, 0x0d, 0x26, 0x66, 0xda, 0x11, 0x56, 0xc0, 0x76, 0xc8, 0x37,
	0x9a, 0x4f, 0x2e, 0xb0, 0x15, 0x02, 0x98, 0x61, 0x80, 0xa6, 0x83, 0x22, 0x30, 0x94, 0x03, 0xd9,
	0xb1, 0x85, 0x12, 0xb2, 0xf3, 0xb0, 0x4e, 0x7f, 0x90, 0x20, 0x1d, 0x32, 0x41, 0x65, 0x48, 0xb1,
	0x30, 0xa1, 0xd5, 0xce, 0x12, 0x57, 0x6e, 0xe8, 0xc4, 0xa7, 0x33, 0x93, 0x87, 0x16, 0x0e, 0x00,
	0x62, 0x90, 0x8d, 0x0a, 0x9e, 0x45, 0xa3, 0x82, 0x67, 0xe8, 0x11, 0xa4, 0xae, 0x06, 0xe3, 0xe9,
	0xdd, 0x54, 0xb8, 0xfb, 0xa5, 0xfc, 0x42, 0xd2, 0xfe, 0x07, 0x45, 0xa0, 0xe8, 0xef, 0x30, 0x4d,
	0x62, 0x03, 0xc1, 0xff, 0x68, 0x7b, 0x90, 0x16, 0x01, 0xde, 0x43, 0x5a, 0xab, 0x7d, 0x92, 0x21,
	0xc5, 0xfa, 0x82, 0x2a, 0x90, 0xc6, 0x94, 0x5a, 0x43, 0xd7, 0xc6, 0x8c, 0x65, 0xae, 0x9c, 0xbf,
	0xd9, 0x39, 0xfe, 0xad, 0xb9, 0x36, 0x36, 0x15, 0x4c, 0x99, 0x11, 0x0c, 0x5c, 0x90, 0xe4, 0x90,
	0x73, 0x97, 0x6d, 0x23, 0xc3, 0x5c, 0x06, 0x39, 0x77, 0xb5, 0xcf, 0x12, 0x64, 0xa2, 0x0c, 0x94,
	0x03, 0xe8, 0x37, 0xad, 0x4e, 0xaf, 0x56, 0xd3, 0x3b, 0x1d, 0x35, 0x81, 0xb6, 0x20, 0xd3, 0x6f,
	0x5a, 0x8d, 0xaa, 0x71, 0xa8, 0xd7, 0xd5, 0x5f, 0xe1, 0x4f, 0x42, 0x3b, 0xb0, 0xde, 0x6f, 0x5a,
	0xc7, 0xa7, 0xba, 0x79, 0x68, 0x1c, 0x1d, 0x19, 0x5d, 0xbd, 0xae, 0xfe, 0x5c, 0xf4, 0x1a, 0xed,
	0xd3, 0xea, 0xa1, 0x51, 0xb7, 0x4e, 0xaa, 0x66, 0x55, 0xfd, 0x11, 0x7b, 0xb7, 0x61, 0xb5, 0xdf,
	0xb4, 0x5a, 0xf5, 0xb0, 0xec, 0xf7, 0xd8, 0x55, 0x84, 0x4d, 0xee, 0x32, 0xda, 0x1d, 0xdd, 0xec,
	0x86, 0x11, 0x5f, 0x17, 0x93, 0xdb, 0xc7, 0x5d, 0xab, 0x71, 0xdc, 0x6b, 0xd7, 0xd5, 0x6f, 0x91,
	0xab, 0xfc, 0x65, 0x05, 0x56, 0x59, 0x27, 0x3b, 0xfc, 0xaa, 0x41, 0xfb, 0x62, 0xe0, 0xcf, 0x66,
	0x27, 0xae, 0x43, 0x7c, 0x0f, 0xfd, 0x13, 0x29, 0x35, 0x7f, 0xc6, 0x0a, 0x5b, 0x8b, 0x30, 0x3f,
	0x1f, 0x5a, 0x02, 0xed, 0xc1, 0xba, 0xa8, 0x20, 0x46, 0xd5, 0x43, 0xcb, 0xf3, 0x5f, 0x58, 0x38,
	0x3a, 0x5a, 0x02, 0x3d, 0x85, 0x95, 0x86, 0x43, 0x6c, 0xb4, 0xd4, 0xd1, 0xc2, 0xd2, 0x81, 0xd0,
	0x12, 0xa8, 0x02, 0x59, 0x83, 0x78, 0x98, 0xfa, 0x8c, 0xe6, 0x3d, 0x93, 0x9e, 0xc3, 0x1a, 0x4f,
	0x0a, 0x0f, 0xd1, 0x7d, 0xd7, 0x5a, 0xeb, 0x4d, 0xec, 0x81, 0x8f, 0x97, 0xd3, 0x04, 0x72, 0xcb,
	0x76, 0x9e, 0x41, 0xb6, 0x8e, 0xc7, 0xd8, 0xc7, 0x67, 0xb3, 0x9a, 0x61, 0xdf, 0x2b, 0x65, 0x1f,
	0x36, 0x9a, 0xd8, 0x6f, 0xd9, 0x37, 0xee, 0xbd, 0x38, 0x31, 0x94, 0xfe, 0xdf, 0x08, 0xb9, 0x79,
	0x45, 0x6a, 0x09, 0xf4, 0x0a, 0x50, 0xa0, 0xe1, 0x5b, 0xc7, 0x1f, 0x75, 0xe3, 0x47, 0x60, 0xb9,
	0xc4, 0xc6, 0x1c, 0x12, 0x35, 0xae, 0x02, 0x4a, 0x90, 0xdc, 0x22, 0x04, 0x6d, 0xc6, 0x4b, 0x44,
	0x2f, 0xc2, 0xed, 0x49, 0x7b, 0xa0, 0x72, 0x49, 0x59, 0x67, 0xef, 0x6a, 0xc6, 0xd2, 0x5e, 0xcf,
	0xfe, 0x62, 0x6f, 0x5a, 0xe5, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7c, 0x00, 0xa0, 0x86, 0xea,
	0x06, 0x00, 0x00,
}
